generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionStatus {
  ANSWERED
  WAITING
}

model User {
  userId     String  @id @default(uuid()) @map("user_id") @db.Uuid
  name       String? @db.VarChar(255)
  nickname   String  @db.VarChar(255)
  sex        String? @db.VarChar(255)
  age        String? @db.VarChar(255)
  email      String  @unique @db.VarChar(255)
  role       String  @default("USER") @db.VarChar(10)
  provider   String  @db.VarChar(20)
  password   String? @db.VarChar(20)
  imageUrl   String? @map("image_url") @db.VarChar(255)
  currentJob String  @map("current_job") @db.VarChar(255)

  currentJobDetail     CurrentJobDetail?
  jobOfInterest        JobOfInterest[]
  bookmarkedJobNotices BookmarkedJobNotice[]
  question             Question[]
  review               Review[]

  @@map("user")
}

model Partner {
  partnerId           String  @id @default(uuid()) @map("partner_id") @db.Uuid
  imageUrl            String? @map("image_url") @db.VarChar(255)
  nickname            String  @unique @db.VarChar(20)
  category            String  @db.VarChar(50)
  job                 String  @db.VarChar(50)
  escapedPeriod       Int     @map("escaped_period")
  activePeriod        Int     @map("active_period")
  license             String  @db.VarChar(50)
  introductionTitle   String  @map("introduction_title") @db.VarChar(255)
  introductionContent String  @map("introduction_content")
  receivedQuestions   Int     @default(0) @map("received_questions")
  responseRate        Float   @default(0.0) @map("response_rate")
  recommendation      String

  question Question[]
  review   Review[]

  @@map("partner")
}

model Question {
  questionId    Int       @id @default(autoincrement()) @map("question_id")
  userId        String    @map("user_id") @db.Uuid
  partnerId     String    @map("partner_id") @db.Uuid
  question      String
  currentStatus String    @map("current_status")
  // TODO isAnswered 필요?
  isAnswered    Boolean   @default(false) @map("is_answered")
  isReviewed    Boolean   @default(false) @map("is_reviewed")
  createdAt     DateTime  @default(now()) @map("created_at")
  modifiedAt    DateTime? @default(now()) @updatedAt @map("modified_at")

  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  partner Partner @relation(fields: [partnerId], references: [partnerId], onDelete: Cascade)

  answer Answer?
  review Review?

  @@map("question")
}

model Answer {
  answerId   Int       @id @default(autoincrement()) @map("answer_id")
  questionId Int       @unique @map("question_id")
  answer     String
  createdAt  DateTime  @default(now()) @map("created_at")
  modifiedAt DateTime? @default(now()) @updatedAt @map("modified_at")

  question Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  @@map("answer")
}

model Review {
  userId     String    @map("user_id") @db.Uuid
  partnerId  String    @map("partner_id") @db.Uuid
  questionId Int       @unique @map("question_id")
  review     String
  createdAt  DateTime  @default(now()) @map("created_at")
  modifiedAt DateTime? @default(now()) @updatedAt @map("modified_at")

  user     User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  partner  Partner  @relation(fields: [partnerId], references: [partnerId], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  @@id([userId, partnerId, questionId])
  @@map("review")
}

model CurrentJobDetail {
  currentJobDetailId String @id @default(uuid()) @map("current_job_detail_id") @db.Uuid
  grade              String @db.VarChar(255)
  activePeriod       String @map("active_period") @db.VarChar(255)
  escapedJob         String @map("escaped_job") @db.VarChar(255)
  escapedPeriod      String @map("escaped_period") @db.VarChar(255)
  inactivePeriod     String @map("inactive_period") @db.VarChar(255)
  otherJob           String @map("other_job") @db.VarChar(255)

  userId String @unique @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("current_job_detail")
}

model Job {
  jobId Int    @id @default(autoincrement()) @map("job_id")
  title String @unique @db.VarChar(255)

  jobOfInterest JobOfInterest[]

  @@map("job")
}

model JobOfInterest {
  userId String @map("user_id") @db.Uuid
  jobId  Int    @map("job_id")

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [jobId], onDelete: Cascade)

  @@id([userId, jobId])
  @@map("job_of_interest")
}

model Company {
  companyId       Int       @id @default(autoincrement()) @map("company_id")
  companyName     String    @unique @map("company_name") @db.VarChar(255)
  logoUrl         String?   @map("logo_url") @db.VarChar(255)
  companyType     String    @map("company_type") @db.VarChar(255)
  employee        Int?
  incorporation   DateTime?
  companyLocation String    @map("company_location") @db.VarChar(255)
  companyWebsite  String?   @map("company_website") @db.VarChar(255)

  jobNotice JobNotice[]

  @@map("company")
}

model JobNotice {
  jobNoticeId     Int       @id @default(autoincrement()) @map("job_notice_id")
  title           String    @db.VarChar(255)
  titleImageUrl   String?   @map("title_image_url") @db.VarChar(255)
  category        String    @db.VarChar(255)
  deadline        DateTime?
  experience      String    @db.VarChar(255)
  education       String    @db.VarChar(255)
  requirements    String?
  preferences     String?
  salary          String?   @db.VarChar(255)
  jobType         String    @map("job_type") @db.VarChar(255)
  jobLocation     String    @map("job_location") @db.VarChar(255)
  details         String?
  detailsImageUrl String?   @map("details_image_url") @db.VarChar(255)
  jobWebsite      String    @map("job_website")
  hits            Int       @default(0)
  bookmarks       Int       @default(0)
  createdAt       DateTime  @default(now()) @map("created_at")
  modifiedAt      DateTime? @default(now()) @updatedAt @map("modified_at")

  companyId Int @map("company_id")

  company              Company               @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  bookmarkedJobNotices BookmarkedJobNotice[]

  @@map("job_notice")
}

model BookmarkedJobNotice {
  userId      String @map("user_id") @db.Uuid
  jobNoticeId Int    @map("job_notice_id")

  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  jobNotice JobNotice @relation(fields: [jobNoticeId], references: [jobNoticeId], onDelete: Cascade)

  @@id([userId, jobNoticeId])
  @@map("bookmarked_job_notice")
}

// model Content {
//   contentId    Int       @id @default(autoincrement()) @map("content_id")
//   title        String    @db.VarChar(255)
//   creater      String    @db.VarChar(255)
//   category     String    @db.VarChar(255)
//   playform     String    @db.VarChar(255)
//   contentUrl   String    @map("content_url") @db.VarChar(255)
//   thumbailUrl  String    @map("thumbail_url") @db.VarChar(255)
//   createdAt    DateTime  @map("created_at")
//   registeredAt DateTime? @default(now()) @map("registered_at")
// }
