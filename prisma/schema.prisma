generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     String  @id @default(uuid()) @map("user_id") @db.Uuid
  name       String?
  nickname   String  @unique
  sex        String?
  age        String?
  email      String  @unique
  imageUrl   String? @map("image_url")
  currentJob String  @map("current_job")

  // User와 CurrentJobDetail one-to-one 연결
  currentJobDetail CurrentJobDetail?

  // User와 JobOfInterestList one-to-many 연결
  jobOfInterest JobOfInterest[]

  // User와 BookmarkedJobNotice one-to-many 연결
  bookmarkedJobNotices BookmarkedJobNotice[]
}

model CurrentJobDetail {
  id             String @id @default(uuid()) @db.Uuid
  userId         String @unique @map("user_id") @db.Uuid // one-to-one
  grade          String
  activePeriod   String @map("active_period")
  escapedJob     String @map("escaped_job")
  escapedPeriod  String @map("escaped_period")
  inactivePeriod String @map("inactive_period")
  otherJob       String @map("other_job")

  // User와 CurrentJobDetail one-to-one 연결
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model JobOfInterest {
  id            String @id @default(uuid()) @db.Uuid
  userId        String @map("user_id") @db.Uuid // one-to-many
  jobOfInterest String @map("job_of_interest")

  // User와 CurrentJobDetail one-to-many 연결
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model BookmarkedJobNotice {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid // one-to-many

  // User와 BookmarkedJobNotice one-to-many 연결
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Company {
  companyId       Int    @id @default(autoincrement()) @map("company_id")
  companyName     String @unique @map("company_name") @db.VarChar
  logoUrl         String @map("logo_url") @db.VarChar
  companyType     String @map("company_type") @db.VarChar
  employee        Int
  incorporation   String
  companyLocation String @map("company_location") @db.VarChar
  companyWebsite  String @map("company_website") @db.VarChar

  // Company와 Position one-to-many 연결
  jobNotice JobNotice[]
}

model JobNotice {
  jobId           Int       @id @default(autoincrement()) @map("job_id")
  companyId       Int       @map("company_id") // one-to-many
  title           String?   @db.VarChar
  titleImageUrl   String?   @map("title_image_url") @db.VarChar
  category        String    @db.VarChar
  deadline        DateTime  @db.Date
  experience      String?   @db.VarChar
  education       String?   @db.VarChar
  requirements    String?   @db.VarChar
  preferences     String?   @db.VarChar
  salary          String?   @db.VarChar
  jobType         String?   @map("job_type") @db.VarChar
  jobLocation     String    @map("job_location") @db.VarChar
  details         String?   @db.VarChar
  detailsImageUrl String?   @map("details_image_url") @db.VarChar
  jobWebsite      String?   @map("job_website") @db.VarChar
  hits            Int       @default(0)
  bookmarks       Int       @default(0)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  modifiedAt      DateTime? @updatedAt @map("modified_at") @db.Timestamp(6)

  // Company와 Position one-to-many 연결
  company Company @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
}
